Lambda:- 
	a. Lambda is an anonymous functions - used locally
	b. It avoids extraneous .class files for every interface if you want to use the code only once
	c. It enables you to write concise more readable code.
	d. Lambda expressions can only appear in places where they will be assigned to a variable whose type is a functional interface.
	   A functional interface (aka SAM interfaces) has a SINGLE abstract method. eg:- Runnable, Callable, Comparator, TimerTask
	e. Using Lambdas, Inner classes or Normal classes give the same performance - lambdas are useful for code maintenance only.
	
	
	src:-
	
	02_Lambdas/FunctionalInterface_solution
	- Using Lambdas with User defined Functional interfaces (with and w/o arguments).
	- Once the variable of type functional interface is instantiated (with or w/o) lambda you can use it to call interface functions like normal classes.
	
	02_Lambdas/BuiltInInterface_solution
	- Using Lambdas with inbuilt Functional interfaces
	- Using multiline and single line lambdas
	- Using Comparator and Runnable
	- Difference between inner class and lambda (UseRunnable.java)
	- CMD/CTRL + 1 on eclipse for quick fix
	
	02_Lambdas/TraverseCollection_solution
	- for (String str : strings), iterator
	- Consumer interface using lambda
	- forEach Method with lambda
	
	02_Lambdas/FilterCollection_solution
	- Predicate interface
	- filter and predicate
	- parenthesis or no parenthesis for arguments make no difference
	- java.util.function -> Functional interface
	
	02_Lambdas/MethodReference_solution
	- Method reference can be named or unnamed
	- They can be used for:-
	a. Static method - Person::compareAges used instead of compareTo interface (need class name)
	b. Instance method of an object - this :: compareAges of InstaceMethodReferences used instead of compareTo interface (need object name)
	c. Instance method of an arbitrary object - refer to it as a static method
	d. References to a constructor method
	- Need to read up or experiment on how to do c and d
	
	
	02_Lambdas/DefaultMethods_solution
	- As the name suggests they are used to defined default methods for interfaces
	- default key word
	- since it is an interface can't use private members/variables in the method (since interfaces have only public members and public final variables)
	- default method need not be redefined in the final classes
	- default makes an interface behave as an abstract class.
	- default methods can be overridden by the final classes.
	
	02_Lambdas/StaticMethods_solution
	- interfaces can define and implement static methods.
	- This static method can be used as like normal static methods i.e using interface name
	  (PersonInterface.getPersonInfo())
	  
	  
	========================
	
	03_Streams/TraversingStreams_solution
	- Used for converting collections into stream of data.
	- Deals with data as a whole instead of dealing with each item individually
	- Don't have to worry about the details of looping or traversing.
	- **Create a stream object** from collection then use it for:-
		- Traversing - foreach
		- Filtering - filter
		- Aggregating
	- Streams can be created for files also
	- Two kinds of collection streams:-
	    a. Sequential - deal with items one at a time.
	    b. Parallel - deals with items in parallel
	                - person.parallelStream() and person.stream().parallel() both are same
	                - As expected the results are not in order
	                - Used for aggregate processing
	                - Thread creation can take time, so use only if collection is large
	                - Do own bench marking before deciding between stream and parallel stream
	03_Streams/CreatingStreams_solution
	- Convert arrays to streams w/o needing an collection object like ArrayList.
	    a. Stream.of(array) and Arrays.stream(array) both do the same.
	- java.util.Stream - interface
	
	03_Streams/AggregatingStreams_solution
	- Using parallel stream 
	- example of unordered execution in parallel stream
	- Do own bench marking before deciding between stream and parallel stream
	- Map is used to convert one object to another (usually complex object to simple object)
	    - map
	    - mapToInt
	    - mapToDouble
	    - mapToLong
	- OptionalInt, OptionalDouble etc to avoid divide by zero using .isPresent()
	- StreamInteger, StreamLong etc .....
	
============
4.
New API for date and time
They are thread safe.

============
5.
Nashorn's JVM for using Java Script

============

	06_Miscellaneous/JoiningString_solution
    - String.join(separator, variable number of parameters)
    	- separator can be multi-character like "and"
    - java.util.StringJoiner
    	- setEmptyValue
    	- separator, starter, ender
        - Builder design pattern
    	    - sj.add(val1).add(val2).add(val3);
        - Can merge multiple string joiners
    
    06_Miscellaneous/SearchFile_solution
    - Using Stream to traverse files.
    - **try with resources syntax** used with **AutoCloseable**
      http://tutorials.jenkov.com/java-exception-handling/try-with-resources.html
    - **Optional class**
      http://www.tutorialspoint.com/java8/java8_optional_class.htm
    - Optional.get().toString() vs Optional.toString()
    
==========================
Other minor enhancements
   
    - Enhancements in Concurrency
    	a. New Methods for handling races
    	b. Improvements to ConcurrentHAshMap
    	c. Parallel operations with arrays
    	d. New methods for composing async operations
    
    - New Collections Methods
    	Iterable : forEach()
    	Collection: removeIf()
    	List: replaceAll(), sort
    	Iterator: forEachRemaining()
    	Map: forEach(), replace(), remove() and more()
    	
    - Base64 class with encoder and decoder
    
    - Improvements to Annotations
    
    - JDBC improvements 
